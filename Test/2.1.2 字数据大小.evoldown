# 2.1.2 字数据大小



#d 字长的作用

每台计算机都有一个字长（word size), 指明指针数据的标称大小(nominal size) 
他是一个范围。这里没有举实例不太懂。
#t 什么是指针数据
#d 字长的大小决定虚拟地址空间的最大值

因为 虚拟地址是以这样的一个字来编码的，所以字长决定的最重要的系统参数就是虚拟地址空 间的最大大小。也就是说，对于一个字长为 w位(32位，64位)的机器而言，虚拟地址的范围为 0-2(w次方)—1， 程序最多访问(2的w次方)个字节。





#d 向后兼容性

大多数 64 位机器也可以运行为 32 位机器编译的程序，这是一种向后兼容。



#d 32位程序与64位程序之间的区别

区别在于该程序是如何编译的， 而不是其运行的机器类型。

#d 各种数值类型的区别在于编码方式不同

计算机和编译器支持多种不同方式编码的数字格式，如不同长度的整数和浮点 数。

#t 疑惑

比如，许多机器都有处理单个字节的 指令，也有处理表示为 2 字节、4 字节或 者 8 字节整数的指令，还有些指令支持表 示为 4 字节和 8 字节的浮点数

```
字节是一种值，他就是文本字符。
他是用一个唯一整数所表示的。不记得了吗
```



#d C 语言各种数据类型分配的字节数

C 语言支持整数和浮点数的多种数据 格式。图 2-3 展示了为 C 语言各种数据类型分配的字节数。

每种数据类型所分配的字节数是不相同的。还有计算机的操作位数。比如 在c语言中 long数据类型。
32位机器所占用的字节就与64位不相同。分别是 
4 和 8.
字节数大所反映的就是，占用空间.

#t 字节的概念(回顾)
字节是什么，不是什么
与之类似的是什么
物理学中的原子。也是所有物质的所必备的。最底层的东西。在编程中，最基础的就是值与变量。
字节的表示
字节的组成



#d 程序的可移植性

程序员应该力图使他们的程序在不同的机器和编译器上可移植。

可移植性的一个方面就 是使程序对**不同数据类型的确切大小**不敏感。



C 语言标准对不同数据类型的数字范围设置了 下界(这点在后面还将讲到）， 但是却没有上界。

#d 从64位机器移植带来的问题

因为从 1980 年左右到 2010 年左右，32 位机 器和 32 位程序是主流的组合，许多程序的编写都假设为图 2-3 中 32 位程序的字节分配。随 着 64 位机器的日益普及，在将这些程序移植到新机器上时，许多隐藏的对字长的依赖性就 会显现出来，成为错误。

#e  例子1

比如，许多程序员假设一个声明为 int 类型的程序对象能被用来存储 一个指针。这在大多数 32 位的机器上能正常工作，但是在一台 64 位的机器上却会导致问题。



# 重要概念

```
字长  64位 32位
虚拟地址 虚拟空间
编码
数据类型 数值类型  
数字格式 浮点数 整数 双精度浮点 单精度浮点
指针 指针数据大小
可移植性
字节
关键字
编码 
```

## 疑问



## 问题

### 1. 为什么64位能运行的程序在32位就不能运行了呢

我如果要跟别人讲清楚，首先它需要知道什么是字长。它指明了(支持多大的程序范围)所以字长决定的最重要的系统参数就是虚拟地址空 间的最大大小。32位只支持，xx。而64位支持 2 * 11 的字节。

我们写程序，程序中的各种数据类型，都是有相应的字节大小的。在两种机器中，用c声明的各种数据类型，所表示的字节数量是不相同的，比如。float类型，在64位中表示 八位。而在32位中只表示4位。当我们把一个在64位写好的程序，放到32位机器上跑时，因为两种字节数不匹配，所以就会导致超过虚拟空间的这么一种情况。