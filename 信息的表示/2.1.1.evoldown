#前言
#d 表示方式:二值信号


现代计算机存储和处理的信息以二值信号表示。

这属于命题知识，就像 二是偶数一样。
就像，python表示变量的方式，不需要在前面增加 var。一样。
这句话不需要理解，只需要记住就可以了。

#d 二进制数字的威力

这些微不足道的二进制数字，或者称 为位(bit), 形成了数字革命的基础。

#d 二进制的起源与发展

大家熟悉并使用了 1000 多年的十进制（以 10 为基数） 起源于印度，在 12 世纪被阿拉伯数学家改进，并在 13 世纪被意大利数学家 Leonardo Pisano(大约公元 1170— 1250, 更为大家所熟知的名字是 Fibonacci)带到西方。

#d 为什么二进制的表示方式更适合计算机

对于有 10' 个手指的人类来说，使用十进制表示法是很自然的事情，但是当构造存储和处理信息的机 器时，二进制值工作得更好。

#d 理由1
1. 二值信号能够很容易地被表示、存储和传输。
#e 导线的表示
可以表 示为穿孔卡片上有洞或无洞、导线上的高电压或低电压。

#e 磁场的表示

顺时针或逆时针的磁场。

#e 交易市场


#t 扩展阅读
编码这本书应该有相关的资料。


对 二值信号进行存储和执行计算的**电子电路**非常简单和可靠，制造商能够在一个单独的硅片 上集成数百万甚至数十亿个这样的电路。 



#本章的主要内容 整数与浮点的表示

孤立地讲，单个的位不是非常有用。然而，当把位组合在一起，再加上某种解释(inter¬ pretation), 即赋予不同的可能位模式以含意，我们就能够表示任何有限集合的元素。比 如，使用一个二进制数字系统，我们能够用位组来编码非负数。通过使用标准的**字符码**， 我们能够对文档中的字母和符号进行编码。在本章中，我们将讨论这两种**编码**，以及**负数表示**和**实数近似值**的编码。 

#d 三种数字表示
1. 无符号
无符号（unsigned)编码基于传统的二进制表示法， 表示大于或者等于零的数字。

2. 补码

补码（two’s-complement)编码是表示有符号整数的最常见的 方式，有符号整数就是可以为正或者为负的数字。

3. 浮点数

浮点数（floating-point)编码是表示实数 的科学记数法的以 2 为基数的版本。计算机用这些不同的表示方法实现算术运算，例如加 法和乘法，类似于对应的整数和实数运算。


#d 计算机表示法
 计算机的表示法是用有限数量的位来对一个数字编码，因此，当结果太大以至不能表 示时，某些运算就会溢出（overflow)。溢出会导致某些令人吃惊的后果。例如，在今天的 大多数计算机上(使用 32 位来表示数据类型 int)�计算表达式 200*300*400*500 会得出结果 884 901 888。这违背了整数运算的特性，计算一组正数的乘积不应产生一个负的结果。

值的范围和不同算术运算的属 性

通过研究数字的实际表示，我们能够了解可以表示的值的范围和不同算术运算的属 性。


#d 了解这种属性的重要性

为了使编写的程序能在全部数值范围内正确工作，而且具有可以跨越不同机器、操作 系统和编译器组合的可移植性，了解这种属性是非常重要的。


#d 计算机的安全漏洞
后面我们会讲到，大量计算 机的安全漏洞都是由于**计算机算术运算**的微妙细节引发的。在早期，当人们碰巧触发了程 序漏洞，只会给人们带来一些不便，但是现在，有众多的黑客企图利用他们能找到的任何 漏洞，不经过授权就进入他人的系统。这就要求程序员有更多的责任和义务，去了解他们 的程序如何工作，以及如何被迫产生不良的行为。 


# 本章内容
#d 二进制表示形式
计算机用几种不同的二进制表示形式来编码数值
在本章中，我们描述这些编码，并且教你如何推出数字的表示。 
#t 为什么要学习
通过直接操作数字的位级表示，我们得到了几种进行算术运算的方式。理解这些技术对 于理解编译器产生的机器级代码是很重要的，编译器会试图优化算术表达式求值的性能。 

### 两个部分 基本定义到 属性的讲解

我们对这部分内容的处理是基于一组核心的数学原理的。从编码的基本定义开始，然 后得出一些属性，例如可表示的数字的范围、它们的位级表示以及算术运算的属性。

### 重要观念 

我们 相信从这样一个抽象的观点来分析这些内容，对你来说是很重要的，因为程序员需要对计 算机运算与更为人熟悉的整数和实数运算之间的关系有清晰的理解。



# 如何阅读本章

本章我们研究在计算机上如何表示数字和其他形式数据的基本属性，以及计算机对 这些数据执行操作的属性。这就要求我们深入研究数学语言，编写公式和方程式，以及 展示重要属性的推导。 为 了帮助你阗读，这部分内容安排如下：首先给出以数学形式表示的属性，作为原 理。然后，用例子和非形式化的讨论来解释这个原理。


##一些建议
1. 我们建议你反复阅读**原理描述**和 它的**示例与讨论**，直到你对该属性的说明内容及其重要性有了**牢固的直觉**。对于更加复 杂的属性，还会提供推导，其结构看上去将会像一个数学证明。虽 然最终你应该尝试理 解这些推导，但在第一次阅读时你可以跳过它们。


2.  我们也鼓励你在阅读正文的过程中完成练习题，这会促使你主动学习，帮助你理论联 系实际。有了这些例题和练习题作为背景知识，再返回推导，你将发现理解起来会容易许 多。同时，请放心，掌握好高中代数知识的人都具备理解这些内容所需要的数学技能
