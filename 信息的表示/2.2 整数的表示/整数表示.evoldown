# 整数表示

## 前言

#d 编码整数的两种方式

一种只能表示`非负数`。而另 一种能够表示`负数`、`零`和`正数`。

#c q 主要内容

后面我们将会看到它们在数学属性和机器级实现方面密切 相关。我们还会研究扩展或者收缩一个已编码整数以适应不同长度表示的效果。 


#d 计算机如何编码和操作整数图示
图 2-8 列出了我们引人的数学术语，用于精确定义和描述计算机如何编码和操作整 数。这些术语将在描述的过程中介绍，图在此处列出作为参考

这个图不是用来死记硬背的。需要尝试理解。先跳过吧。


## 2.2.1 整型数据类型
#d C语言整型数据类型特性
C 语言支持多种整型数据类型一表示有限范围的整数。与`python`,JavaScript`相比，其他的只有整数和浮点数。c语言不一样。
#d 关键字声明
图中是c语言定义多种数据类型的关键字。(关键字只需要记忆，无法泛化。而定义关键字的方式有规律可以泛化)
每种类型都能用关键字来指定大小，这些关键字包括 char�short�long�同时还可以指示被表示的数字是非负数
(声明为 unsigned)�或者可能是负数（默认）。 如图 2-3 所示，为这些不同的大小分配的字节数根据程序编译为 32 位还是 64 位而有所不同。
#d 取值范围差异
32 位程序与在64位程序上 C 语言整型数据类型的典型取值范围的差异。
1. 大多数 64 位机器使用 8 个字节的表示，32位使用4字节。
所以64位的机器的取值范围会大很多。但与此同时，64位机器所需的内存也需要增加。取值范围越大，能够计算的范围也就越大，所以使用起来直观上64位的机器运算速度就会比32位快。
2. long数据类型在32位与64位，之间的取值范围存在巨大差异。
3. 负数的范围比整数的范围大 1。
4. C 语言标准定义了每种数据类型必须能够表示的最小的取值范围
#e 图片展示了取值范围之间的差异


## 2.2.2 无符号的编码
#c q 什么叫无符号
#c q 阅读策略
 第一遍可以先不必尝试理解原理，先看其实现。
没有关键字声明吗？不确定。无符号与整数之间的编码之间的关系是什么呢？
#d 位向量的表示
x> 表示整个向量
不太懂是如何表示的。这个公式不太懂。
我们假设位向量为8位。那么这个如何表示呢？
#d 无符号的表示方式
把x>看做一个二进制表示的数，就获得了x>的无符号表示。
#d 无符号数编码的定义-函数表示
#e 几个例子

B2U5 = [10111] = 16 + 0 + 4 + 2 + 1 = 23


#d 共性
1. 都从左边开始。
2. 幂次的大小却决于向量长度-1。比如，位长度为5，也就是w=5.那么就先从，2的4次幂开始。

#c q 猜想
我的猜想正确吗？难道都是这样的？

#d 唯一性
看不太懂。缺少前置概念。需要把函数理解一下。
我猜他的意思就是，因为他们是相等的。所有每个位向量映射的非负整数值，反过来。给定一个非负整数值，同样也可以得出一个唯一的位向量。



## 2.2.3 补码编码

#d 表示方式 
B2Tw (w为位向量的长度）

#e 书中的例子

#c q 猜想

#e 练习题2.17

他给出了一个例子。我脑中出现的一个思路就是。前面出现过的例子。但我不知道对不对。如果是，那会不会太简单了。



#d 最大值与最小值表示方式

 最大值是在无符号的函数公式上。


#c q 疑问

负数的十六进制是如何表示的。
10进制与16进制的转换。
先除以16所得到的商去乘16，得出剩余的余数。
在用商去反复执行此过程。再把所有的余数全部组合起来，就得到了一组十六进制。需要注意的是，所得到的第一个余数，是十六进制的末尾。
 

-12345.
先转换成n的2次幂。然后使用 i +4*j。的方式，得出十六进制。然后再用十六进制，转换成2进制。


##2.2.4 有符号数和无符号数之间的转换

#d 强制类型转换(这是信息)
C 语言允许在各种不同的数字数据类型之间做强制类型转换。

#e 实例
`

`